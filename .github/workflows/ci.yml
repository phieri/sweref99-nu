name: Build all

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**.md'

jobs:
  build-sqlite:
    name: Build SQLite
    runs-on: ubuntu-latest
    steps:
      - run: |
          sudo apt-get -qq update && sudo apt-get --quiet --assume-yes install \
            emscripten build-essential
      - run: |
          wget https://www.sqlite.org/2023/sqlite-amalgamation-3420000.zip
          unzip sqlite-amalgamation-3420000.zip
          cd sqlite-amalgamation-3420000
          emcc -O2 -c sqlite3.c -o sqlite3.o
          emar rcs libsqlite3.a sqlite3.o
      - uses: actions/upload-artifact@v4
        with:
          name: sqlite3
          path: |
            sqlite-amalgamation-3420000/libsqlite3.a
            sqlite-amalgamation-3420000/sqlite3.h
  build-proj:
    name: Build PROJ
    runs-on: ubuntu-latest
    needs: build-sqlite
    steps:
      - run: |
          sudo apt-get -qq update && sudo apt-get --quiet --assume-yes install \
            emscripten build-essential cmake curl libtiff-dev
      - uses: actions/checkout@v5
        with:
          repository: OSGeo/PROJ
          ref: 9.6.2
      - uses: actions/download-artifact@v4
        with:
          name: sqlite3
          path: ./sqlite3/
      - run: |
          mkdir build
          cd build
          emcmake cmake .. \
            -DBUILD_APPS=OFF \
            -DBUILD_TESTING=OFF \
            -DBUILD_SHARED_LIBS=OFF \
            -DSQLite3_INCLUDE_DIR=$(pwd)/../sqlite3 \
            -DSQLite3_LIBRARY=$(pwd)/../sqlite3/libsqlite3.a \
            -DENABLE_CURL=OFF \
            -DENABLE_TIFF=OFF \
            -DCMAKE_INSTALL_PREFIX=$(pwd)/install
          emmake make -j$(nproc)
          emmake make install
      - uses: actions/upload-artifact@v4
        with:
          name: proj
          path: |
            build/install/lib/libproj.a
            build/install/include/
  build-wasm:
    name: Build Wasm
    runs-on: ubuntu-24.04
    needs: build-proj
    steps:
      - run: |
          sudo apt-get -qq update && sudo apt-get --quiet --assume-yes install \
            emscripten build-essential
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v4
        with:
          name: proj
          path: ./
      - run: |
          echo "=== Checking downloaded artifacts ==="
          ls -la
          echo "=== Creating build structure ==="
          # Create build directory and move artifacts to expected locations
          mkdir -p build/include
          # Move libproj.a to expected location
          if [ -f libproj.a ]; then
            mv libproj.a build/
            echo "Moved libproj.a to build/"
          else
            echo "ERROR: libproj.a not found"
            exit 1
          fi
          # Move headers to expected location
          if [ -d include ]; then
            mv include/* build/include/
            echo "Moved headers to build/include/"
          else
            echo "ERROR: include directory not found"
            exit 1
          fi
          echo "=== Final build structure ==="
          ls -la build/
          ls -la build/include/
          echo "=== Building WASM ==="
          make sr9.wasm
      - uses: actions/upload-artifact@v4
        with:
          name: wasm
          path: |
            sr9.wasm
            sr9.js
  build:
    name: Build
    runs-on: ubuntu-24.04
    needs: build-wasm
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm install -g typescript
      - uses: actions/download-artifact@v4
        with:
          name: wasm
          path: ./
      - run: |
          echo "=== Checking downloaded WASM artifacts ==="
          ls -la
          echo "=== Building TypeScript ==="
          make script.js
          echo "=== Copying WASM files to _site ==="
          cp sr9.wasm _site/
          cp sr9.js _site/
          echo "=== Final _site contents ==="
          ls -la _site/
          echo "=== Adding additional files ==="
          echo "${{ vars.adstxt }}" > _site/ads.txt
          curl -o _site/pico.min.css https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css
          echo "=== Final _site contents ==="
          ls -la _site/
      - uses: actions/upload-pages-artifact@v4
  deploy:
    name: Deploy
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
